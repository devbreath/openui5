/*!
 * OpenUI5
 * (c) Copyright 2009-2022 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
sap.ui.define(["sap/base/Log","sap/ui/performance/Measurement","sap/ui/Global"],function(L,M,G){"use strict";var a={name:"LRUPersistentCache",logResolved:function(e){L.debug("Cache Manager: "+e+" completed successfully.");},defaultOptions:{databaseName:"ui5-cachemanager-db",_contentStoreName:"content-store",_metadataStoreName:"metadata-store",_metadataKey:"metadataKey"},_db:{},init:function(){this._metadata={};this._mru=-1;this._lru=-1;return l(this);},_destroy:function(){if(this._db.close){this._db.close();}this._metadata=null;this._ui5version=null;},set:function(e,i){if(E(e)){L.warning("Cache Manager ignored 'set' for key ["+e+"]");return Promise.resolve();}if(e==null){return Promise.reject("Cache Manager does not accept undefined or null as key");}if(typeof i==="undefined"){return Promise.reject("Cache Manager does not accept undefined as value");}L.debug("Cache Manager LRUPersistentCache: adding item with key ["+e+"]...");var p=this,J="[sync ] fnSet: total[sync]  key ["+e+"]",K="[sync ] fnSet: txStart[sync]  key ["+e+"]",N="[sync ] fnSet: storeOpen[sync]  key ["+e+"]",O="[sync ] fnSet: putContent[sync]  key ["+e+"]",P="[sync ] fnSet: putMetadata[sync]  key ["+e+"]",Q="[sync ] fnSet: serialize[sync]  key ["+e+"]";return new Promise(function Z(R,S){M.start(J,"CM",s);var T,U,V,W,X;X=q(p._metadata);W=new n(e,i,typeof i,++p._mru,Q,s).serialize();M.start(K,"CM",s);var Y=p._db.transaction([p.defaultOptions._contentStoreName,p.defaultOptions._metadataStoreName],"readwrite");M.end(K);Y.onerror=function($){var _="Cache Manager cannot complete add/put transaction for entry with key: "+W.oData.key+". Details: "+B($);L.error(_);p._metadata=X;r(p);S(_);};Y.onabort=function($){p._metadata=X;r(p);var _=t(p);if(y($)&&_>0){L.warning("Cache Manager is trying to free some space to add/put new item");x(p,e,i).then(function(){L.debug("Cache Manager LRUPersistentCache: set completed after freeing space. ItemCount changed from "+_+" to "+t(p));R();},function(b1){var c1="Cache Manager LRUPersistentCache: set unsuccessful. Cannot free space to add/put entry. Details: "+b1;L.error(c1);S(c1);});}else{var a1="Cache Manager LRUPersistentCache: set failed: "+B($);L.error(a1);S(a1);}};Y.oncomplete=function(){L.debug("Cache Manager LRUPersistentCache: adding item with key ["+e+"]... done");R();};M.start(N,"CM",s);T=Y.objectStore(p.defaultOptions._contentStoreName);V=Y.objectStore(p.defaultOptions._metadataStoreName);M.end(N);M.start(O,"CM",s);U=T.put(W.oData,W.oData.key);M.end(O);M.end(J);U.onsuccess=function(){u(p,W);M.start(P,"CM",s);V.put(p._metadata,p.defaultOptions._metadataKey);M.end(P);};if(L.getLevel()>=L.Level.DEBUG){L.debug("Cache Manager LRUPersistentCache: measurements: "+J+": "+M.getMeasurement(J).duration+"; "+Q+": "+M.getMeasurement(Q).duration+"; "+K+": "+M.getMeasurement(K).duration+"; "+N+": "+M.getMeasurement(N).duration+"; "+O+": "+M.getMeasurement(O).duration+"; "+P+": "+M.getMeasurement(P).duration);}});},has:function(e){if(E(e)){L.warning("Cache Manager ignored 'has' for key ["+e+"]");return Promise.resolve(false);}return this.get(e).then(function(i){var p=typeof i!=="undefined";L.debug("Cache Manager: has key ["+e+"] returned "+p);return p;});},_getCount:function(){return Promise.resolve(t(this));},_getAll:function(e){var i=this,p,J="[sync ] _getAll: deserialize";return new Promise(function(K,N){var O=[],P=i._db.transaction([i.defaultOptions._contentStoreName],"readonly"),Q=P.objectStore(i.defaultOptions._contentStoreName);P.onerror=function(R){N(B(R));};P.oncomplete=function(R){K(O);};Q.openCursor().onsuccess=function(R){var S=R.target.result;if(S&&S.value){p=new n(S.value,J,m).deserialize();O.push({key:p.oData.key,value:p.oData.value});S.continue();}};});},_loadMetaStructure:function(){var i=this;return new Promise(function(p,J){var K=i._db.transaction([i.defaultOptions._metadataStoreName],"readonly");K.onerror=function(P){if(!K.errorHandled){K.errorHandled=true;var Q="Cache Manager cannot complete transaction for read metadata. Details: "+K.error;L.error(Q);J(Q);}};var N=K.objectStore(i.defaultOptions._metadataStoreName);try{var O=N.get(i.defaultOptions._metadataKey);O.onsuccess=function(P){i._metadata=O.result?O.result:o(i._ui5version);if(i._metadata.__ui5version!==i._ui5version){i.reset().then(p,function(e){L.error("Cannot reset the cache. Details:"+e);K.abort();});}else{if(!i._metadata.timestamps){i._metadata.timestamps={};}p();}};O.onerror=function(P){L.error("Cache Manager cannot complete transaction for read metadata items. Details: "+P.message);J(P.message);};}catch(e){L.error("Cache Manager cannot read metadata entries behind key: "+i.defaultOptions._metadataKey+". Details: "+e.message);J(e.message);}});},get:function(e){if(E(e)){L.warning("Cache Manager ignored 'get' for key ["+e+"]");return Promise.resolve();}return g(this,e);},del:function(e){if(E(e)){L.warning("Cache Manager ignored 'del' for key ["+e+"]");return Promise.resolve();}return d(this,e);},delWithFilters:function(e){var i=this,p=e||{};return new Promise(function(J,K){var N=q(i._metadata),T=i._db.transaction([i.defaultOptions._contentStoreName,i.defaultOptions._metadataStoreName],"readwrite"),O=T.objectStore(i.defaultOptions._contentStoreName),P=T.objectStore(i.defaultOptions._metadataStoreName),Q=O.openCursor(),R=p.prefix||"";function S(){i._metadata=N;r(i);}function U(V){S();K(B(V));}T.onerror=U;T.onabort=U;T.oncomplete=function(V){J();};Q.onsuccess=function(V){var W=V.target.result,X,Y;if(!W){P.put(i._metadata,i.defaultOptions._metadataKey);return;}X=W.value.key;if(X.indexOf(R)===0&&(!p.olderThan||!(X in i._metadata.timestamps)||i._metadata.timestamps[X]<=p.olderThan)){Y=W.delete();Y.onsuccess=function(){L.debug('Deleted '+X+'!');z(i,X);};}W.continue();};});},reset:function(){var i=this;return new Promise(function(p,J){var K,N,O,P,Q;Q=i._db.transaction([i.defaultOptions._contentStoreName,i.defaultOptions._metadataStoreName],"readwrite");Q.onerror=Q.onabort=function(R){if(!Q.errorHandled){Q.errorHandled=true;var S="Cache Manager LRUPersistentCache: transaction for reset() failed. Details: "+Q.error;L.error(S);J(S);}};Q.oncomplete=function(R){p();};K=Q.objectStore(i.defaultOptions._contentStoreName);N=Q.objectStore(i.defaultOptions._metadataStoreName);try{O=K.clear();O.onerror=function(){Q.abort();};O.onsuccess=function(){P=N.clear();P.onerror=function(){Q.abort();};P.onsuccess=function(){i._metadata=o(G.version);r(i);};};}catch(e){Q.abort();}});}};var m="LRUPersistentCache,get",s="LRUPersistentCache,set",b=0;function c(i,p){var J;i._metadata.timestamps[p.oData.key]=Date.now();J=i._db.transaction([i.defaultOptions._contentStoreName,i.defaultOptions._metadataStoreName],"readwrite");J.onerror=J.onabort=function(K){L.warning("Cache Manager cannot persist the information about usage of an entry. This may lead to earlier removal of the entry if browser storage space is over. Details: "+J.error);};try{J.objectStore(i.defaultOptions._metadataStoreName).put(i._metadata,i.defaultOptions._metadataKey);}catch(e){L.warning("Cache Manager cannot persist the information about usage of an entry. This may lead to earlier removal of the entry if browser storage space is over. Details: "+e.message);}}function d(e,i){return new Promise(function(p,J){var K,N;K=e._db.transaction([e.defaultOptions._contentStoreName,e.defaultOptions._metadataStoreName],"readwrite");N=q(e._metadata);function O(Q){e._metadata=N;r(e);var R="Cache Manager LRUPersistentCache: cannot delete item with key: "+i+". Details: "+B(Q);L.error(R);J(R);}K.onerror=O;K.onabort=O;K.oncomplete=function(){if(t(e)===0){e._lru=-1;e._mru=-1;e._metadata=o(e._ui5version);}L.debug("Cache Manager LRUPersistentCache: item with key "+i+" deleted");p();};L.debug("Cache Manager LRUPersistentCache: deleting item ["+i+"]");var P=K.objectStore(e.defaultOptions._contentStoreName).delete(i);P.onsuccess=function(){L.debug("Cache Manager LRUPersistentCache: request for deleting item ["+i+"] is successful, updating metadata...");z(e,i);K.objectStore(e.defaultOptions._metadataStoreName).put(e._metadata,e.defaultOptions._metadataKey);};});}function g(i,J){if(i.getCounter===undefined){i.getCounter=0;}i.getCounter++;var K="[sync ] fnGet"+i.getCounter+": total[sync]  key ["+J+"]",N="[sync ] fnGet"+i.getCounter+": txStart[sync]  key ["+J+"]",O="[sync ] fnGet"+i.getCounter+": storeOpen[sync]  key ["+J+"]",P="[sync ] fnGet"+i.getCounter+": access result[sync]  key ["+J+"]",Q="[sync ] fnGet"+i.getCounter+": putMetadata[sync]  key ["+J+"]",R="[sync ] fnGet"+i.getCounter+": deserialize[sync]  key ["+J+"]",S="[sync ]  _instance.get",T="[sync ]  getRequest.onSuccess";L.debug("Cache Manager LRUPersistentCache: get for key ["+J+"]...");M.start(S,"CM",m);var p=new Promise(function $(U,V){var W,X,Y,Z;M.start(K,"CM",m);M.start(N,"CM",m);X=i._db.transaction([i.defaultOptions._contentStoreName,i.defaultOptions._metadataStoreName],"readwrite");M.end(N);X.onerror=function(_){var a1="Cache Manager cannot complete delete transaction for entry with key: "+J+". Details: "+X.error;L.error(a1);V(a1);};try{M.start(O,"CM",m);Y=X.objectStore(i.defaultOptions._contentStoreName).get(J);M.end(O);Y.onsuccess=function(_){M.start(T,"CM",m);M.start(P,"CM",m);Z=new n(Y.result,R,m);M.end(P);H("Cache Manager LRUPersistentCache: accessing the result",J,P);if(Z.oData){M.start(Q,"CM",m);if(Z.oData.lu!==i._mru){Z.oData.lu=++i._mru;u(i,Z);}c(i,Z);M.end(Q);W=Z.deserialize().oData.value;}M.end(T);L.debug("Cache Manager LRUPersistentCache: get for key ["+J+"]...done");U(W);};Y.onerror=function(_){L.error("Cache Manager cannot get entry with key: "+J+". Details: "+_.message);V(_.message);};}catch(e){L.error("Cache Manager cannot get entry with key: "+J+". Details: "+e.message);V(e.message);return;}M.end(K);});M.end(S);return p;}function f(e){var K=v(e);if(K==undefined){var i="Cache Manager LRUPersistentCache: deleteItemAndUpdateMetadata cannot find item to delete";L.debug(i);return Promise.reject(i);}return j(e,K).then(function(){return Promise.resolve().then(function(){z(e,K);return h(e).then(function(){return K;},function(){L.warning("Cache Manager LRUPersistentCache: Free space algorithm deleted item "+"but the metadata changes could not be persisted. This won't break the functionality.");return K;});});});}function h(i){return new Promise(function(p,J){try{var K=i._db.transaction([i.defaultOptions._contentStoreName,i.defaultOptions._metadataStoreName],"readwrite");K.onerror=N;K.onabort=N;K.oncomplete=function(){L.debug("Cache Manager LRUPersistentCache: persistMetadata - metadata was successfully updated");p();};K.objectStore(i.defaultOptions._metadataStoreName).put(i._metadata,i.defaultOptions._metadataKey);}catch(e){N(null,e);}function N(O,P){var Q="Cache Manager LRUPersistentCache: persistMetadata error - metadata was not successfully persisted. Details: "+B(O)+". Exception: "+(P?P.message:"");L.debug(Q);J(Q);}});}function j(e,i){return new Promise(function(p,J){var K=e._db.transaction([e.defaultOptions._contentStoreName,e.defaultOptions._metadataStoreName],"readwrite");function N(O){var P="Cache Manager LRUPersistentCache: internalDel cannot complete delete transaction for entry with key: "+i+". Details: "+B(O);L.warning(P);J(O);}K.onerror=N;K.onabort=N;K.oncomplete=function(){if(t(e)===0){e._lru=0;e._mru=0;e._metadata=o(e._ui5version);}L.debug("Cache Manager LRUPersistentCache: internalDel deleting item ["+i+"]...done");p();};L.debug("Cache Manager LRUPersistentCache: internalDel deleting item ["+i+"]...");K.objectStore(e.defaultOptions._contentStoreName).delete(i);});}function k(e,i,p){return new Promise(function(J,K){var N,O,P,Q="[sync ] internalSet: serialize[sync]  key ["+i+"]";P=q(e._metadata);var R=new n(i,p,typeof p,++e._mru,Q,s).serialize();L.debug("Cache Manager: LRUPersistentCache: internal set with parameters: key ["+R.oData.key+"], access index ["+R.oData.lu+"]");O=e._db.transaction([e.defaultOptions._contentStoreName,e.defaultOptions._metadataStoreName],"readwrite");O.onerror=S;O.onabort=S;function S(T){L.debug("Cache Manager: LRUPersistentCache: internal set failed. Details: "+B(T));e._metadata=P;r(e);K(T);}O.oncomplete=function(){L.debug("Cache Manager: LRUPersistentCache: Internal set transaction completed. ItemCount: "+t(e));J();};N=O.objectStore(e.defaultOptions._contentStoreName).put(R.oData,R.oData.key);N.onsuccess=function(){u(e,R);O.objectStore(e.defaultOptions._metadataStoreName).put(e._metadata,e.defaultOptions._metadataKey);};});}function u(e,i){if(e._metadata.__byKey__[i.oData.key]!=null){var p=e._metadata.__byKey__[i.oData.key];delete e._metadata.__byIndex__[p];L.debug("Cache Manager LRUPersistentCache: set/internalset - item already exists, so its indexes are updated");}e._metadata.__byIndex__[i.oData.lu]=i.oData.key;e._metadata.__byKey__[i.oData.key]=i.oData.lu;A(e);}function l(i){i._ui5version=G.version;return new Promise(function O(p,J){var K;L.debug("Cache Manager "+"_initIndexedDB started");function N(){try{K=window.indexedDB.open(i.defaultOptions.databaseName,1);}catch(e){L.error("Could not open Cache Manager database. Details: "+e.message);J(e.message);}}N();K.onerror=function(e){L.error("Could not initialize Cache Manager database. Details: "+e.message);J(e.error);};K.onsuccess=function(e){var P=F("init_onsuccess");i._db=K.result;i._db.onversionchange=function(e){if(!e.newVersion){e.target.close();}};i._loadMetaStructure().then(function(){L.debug("Cache Manager "+" metadataLoaded. Serialization support: "+C()+", resolving initIndexDb promise");p(i);},J);P.endSync();};K.onupgradeneeded=function(P){var Q=P.target.result;Q.onerror=function(P){L.error("Cache Manager error. Details: "+P.message);J(Q.error);};try{var R=Q.createObjectStore(i.defaultOptions._contentStoreName);Q.createObjectStore(i.defaultOptions._metadataStoreName);}catch(e){L.error("Could not initialize Cache Manager object store. Details: "+e.message);throw e;}R.createIndex("ui5version","ui5version",{unique:false});};});}function I(e,i,p,J){this.key=e;this.sOrigType=p;this.value=i;this.lu=J;}function n(e,i,p,J,K,N){if(arguments.length===3){this.oData=e;this.sMeasureId=i;this.sMsrCat=p;}else{this.oData=new I(e,i,p,J);}}n.prototype.deserialize=function(){if(C()&&this.oData.sOrigType==="object"){M.start(this.sMeasureId,this.sMeasureId,this.sMsrCat);this.oData.value=JSON.parse(this.oData.value);M.end(this.sMeasureId);H("Cache Manager LRUPersistentCache: de-serialization the result",this.oData.key,this.sMeasureId);}return this;};n.prototype.serialize=function(){if(C()&&this.oData.sOrigType==="object"){M.start(this.sMeasureId,this.sMeasureId,this.sMsrCat);this.oData.value=JSON.stringify(this.oData.value);M.end(this.sMeasureId);H("Cache Manager LRUPersistentCache: serialization of the value",this.oData.key,this.sMeasureId);}return this;};function o(e){return{timestamps:{},__byKey__:{},__byIndex__:{},__ui5version:e};}function q(e){var i=o(e.__ui5version);for(var p in e.__byIndex__){i.__byIndex__[p]=e.__byIndex__[p];}for(var J in e.__byKey__){i.__byKey__[J]=e.__byKey__[J];}for(var J in e.timestamps){i.timestamps[J]=e.timestamps[J];}return i;}function r(e){var i=w(e._metadata.__byIndex__);e._mru=i.mru;e._lru=i.lru;L.debug("Cache Manager LRUPersistentCache: LRU counters are assigned to the CM: "+JSON.stringify(i));}function t(e){return Object.keys(e._metadata.__byKey__).length;}function v(e){var K=e._metadata.__byIndex__[e._lru];if(K==undefined&&!A(e)){return null;}else{return e._metadata.__byIndex__[e._lru];}}function w(e){var i=-1,p=-1,J=Number.MAX_VALUE,K=Object.keys(e),N=K.length;if(N===0){return{mru:-1,lru:-1};}else{while(++i<N){var O=parseInt(K[i]);if(p<O){p=O;}if(J>O){J=O;}}return{mru:p,lru:J};}}function x(e,i,p){return new Promise(function(J,K){var N=0;_(e,i,p);function _(e,i,p){N++;L.debug("Cache Manager LRUPersistentCache: cleanAndStore: freeing space attempt ["+(N)+"]");f(e).then(function(O){L.debug("Cache Manager LRUPersistentCache: cleanAndStore: deleted item with key ["+O+"]. Going to put "+i);return k(e,i,p).then(J,function(P){if(y(P)){L.debug("Cache Manager LRUPersistentCache: cleanAndStore: QuotaExceedError during freeing up space...");if(t(e)>0){_(e,i,p);}else{K("Cache Manager LRUPersistentCache: cleanAndStore: even when the cache is empty, the new item with key ["+i+"] cannot be added");}}else{K("Cache Manager LRUPersistentCache: cleanAndStore: cannot free space: "+B(P));}});},K);}});}function y(e){return(e&&e.target&&e.target.error&&e.target.error.name==="QuotaExceededError");}function z(e,i){var p=e._metadata.__byKey__[i];delete e._metadata.__byKey__[i];delete e._metadata.__byIndex__[p];if(e._metadata.timestamps[i]){delete e._metadata.timestamps[i];}A(e);}function A(e){while(e._lru<=e._mru&&e._metadata.__byIndex__[e._lru]==undefined){e._lru++;}return(e._lru<=e._mru);}function B(e){if(!e){return"";}var R=e.message;if(e.target&&e.target.error&&e.target.error.name){R+=" Error name: "+e.target.error.name;}return R;}function C(){return sap.ui.getCore().getConfiguration().isUI5CacheSerializationSupportOn();}function D(){return sap.ui.getCore().getConfiguration().getUI5CacheExcludedKeys();}function E(e){return D().some(function(i){return e.indexOf(i)>-1;});}function F(O,e){b++;var i="[async]  "+O+"["+e+"]- #"+(b),p="[sync ]  "+O+"["+e+"]- #"+(b);M.start(i,"CM",["LRUPersistentCache",O]);M.start(p,"CM",["LRUPersistentCache",O]);return{sMeasureAsync:i,sMeasureSync:p,endAsync:function(){M.end(this.sMeasureAsync);},endSync:function(){M.end(this.sMeasureSync);}};}function H(e,K,i){if(L.getLevel()>=L.Level.DEBUG){L.debug(e+" for key ["+K+"] took: "+M.getMeasurement(i).duration);}}return a;});
